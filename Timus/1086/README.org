#+TITLE: Timus 1086 Cryptography
#+AUTHOR: Arka Barua
#+PROPERTY: header-args :tangle main.c
#+DATE:Mon Dec 12 2022

* Problem Description
Find the *n-th* prime number.
** Input
First line contains a positive integer k. Then k positive integers follow (one in each line). The numbers don't exceed 15000.
** Output
For each number n you should output the n-th by order prime number. Each number should be in its line.
** Sample
| Input | Output |
|-------+--------|
|     4 |        |
|     3 |      5 |
|     2 |      3 |
|     5 |     11 |
|     7 |     17 |

* Solution

** Header Files
#+begin_src c
#include<stdio.h>
#+end_src
** is_prime function
*is_prime()* will see if the number is prime or not(0 or 1)
#+begin_src c
int is_prime(int x) {
  for (int i = 2; i < x; i++) {

    if (x % i == 0)
      return 0;
  }
  return 1;
}
#+end_src
** n_prime function
This function gives the prime number of n position.
#+begin_src c
int n_prime(int y) {

  int i = 2;
  while (y > 0) {

    if (is_prime(i)) {
      y--;
    }
    i++;
  }
  i -= 1; //Increment of i , so i should be decreased by 1
  return i;
}
#+end_src
** Main function
#+begin_src c
int main() {

  int n, loop;
  scanf("%d", &loop);
  for (int i = 0; i < loop; i++) {

    scanf("%d", &n);
    printf("%d\n", n_prime(n));
  }
  return 0;
}
#+end_src
